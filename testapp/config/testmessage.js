module.exports = {
    'app' :{
      'NOT_FOUND': 'Not Found'
    },
    'login':{
        'userCredentials'  : 'User should login with valid credentials',
        'userCredentialsTimezone'  : 'User should login with valid credentials with timezone',
        'userCredentialsWrongTimezone'  : 'User should login with valid credentials with wrong timezone',
        'wrongTimezone': 'Wrong Timezone Value. Please pass correct timezone',
        'authenticatedSuccessfully' :'User is Authenticated successfully',
        'invalidEmail'    :'User should not login with invalid email',
        'emailNotFound'   :'Entered Email address is not registered',
        'incorrectPass'   :'User should not login with incorrect password',
        'emailPassNotinCorrect':'Email address or Password is incorrect',
        'presenInputMiss' :'Check presence of input fields',
        'apiMissing'      :'API inputs are missing'
    },
    'employee':{
       'unauthorized':'Unauthorized user restricted',
       'authorized':'authorized user is able to add user',
       'SuccessfullyAddEmp':'Successfully Added Employee',
       'getAllUser':'get all user list',
       'successfullySend':'Successfully Sent Employee List',
       'checkOrgName':'Check Organization name',
       'OrgName':'Please enter valid organization name',
       'chekUserExt':'Check User Exists',
       'emailAlreadyExit':'The entered Email address is already registered',
       'fieldsMandatory':'All fields are mandatory',
       'fieldsAreNotFormate':'Fields are not in required format',
       'fieldBlank':'All fields cannot be blank',
       'roleAccssPrms':'Role Access Permissions',
       'permissionDenied':'Permission denied',
       'getOtcEmp':'Get otc of an employee',
       'successfullySentEmpOtc':'Successfully Sent Employee OTC',
       'removeUserApi':'Remove user APi',
       'deleteUseEmp':'Delete the user and employee recor',
       'SuccessfullyDelete':'Successfully Deleted',
       'invalidEmail':'Handle invalid email inputs before deleting',
       'noUser':'No user found',
       'controllerName':'Employee controller',
       'addUserApi':'Add user APi',
       'onlyUnauthorized':'Unauthorized'
    },
    'header':{
        'headerInfo':'should Get Error in Header information without JWT',
        'shouldGetHeaderInfo':'should Get Header information',
        'SucessfullyInfo':'Sucessfully sent Header Information',
        'firstName':'should Get Header information without firstName and lastName'
    },
    'moxtra':{
        'noMailSend':'No Mailer to send meet invite',
        'sendMoxtra':'should send moxtra meet invite',
        'invitationSend':'Meet Invitation sent successfully',
        'cancelMeetInvt':'should cancel moxtra meet invite',
        'cancelMeet':'Canceled Meet message sent successfully',
        'checkMail':'should check mail Id\'s to inform cancel moxtra meet',
        'noMail':'No Mailer to send cancel meet',
        'checkMeet':'should check moxtra meet invite mail ID\'s'
    },
    'password':{
       'invalidEmail':'Enter an invalid email with invalid organization domain',
       'EmailAddress':'Email address is invalid',
       'validOrganization':'Enter an invalid email with valid organization domain',
       'emailIsNotRegistered':'Email is not registered with organisation. Ask for invitation link',
       'validEmail':'Enter an valid email to verify',
       'emailVerified':'Email is verified',
       'verifyApi':'Verify User Api',
       'invalidOtc':'Enter an invalid OTC',/////
       'resetApi':'Reset Password Api',
       'oldPasswordMatch': 'Old Password is same as New Password',
       'resetPassword':'Reset password',
       'oldNewPasswordMatched': 'New Password should not be same as Old Password. Please use different Password.',
       'passwordChangeSuccess':'Password changed Successfully',
       'invalidEmailResetPassword':'Enter invalid email on Reset password',
       'resendCode':'Resend Code Api',
       'resendOtc':'Resend OTC',
       'resendOtcLessTime':'Resend OTC less than 4 times',
       'otcResendToEmail':'OTC has been re-sent to Email Address',
       'resendOtcMax':'Resend OTC Max limit reached',
       'resendCode':'Invalid Email on resend code',
       'setPassword':'Set Password and finish registration',
       'registerSucccess':'Registered Successfully',
       'enterInvalidEmail':'Enter invalid email on Register',
       'restrictMultiple':'Restrict multiple registration',
       'emailAlreadyExit':'The entered Email address is already registered',
       'emailVerify':'Email already verified',
       'validOtc':'Enter an valid OTC',
       'matchOtc':'User OTC matches',
       'validOtcMultipleTime':'Enter an valid OTC multiple time',
       'sendChartInvit':'should send chat invitation one-one',
       'chartInviteSend':'Chat Invitation sent successfully',
       'chartInviteSendGroup':'should send chat invitation to group',
       'sendProperResponces':'should send proper response if no invitees',
       'verifyOtc':'Enter an invalid email on verify otc',
       'noMail':'No Mailer to send chat invite',
       'moxtraApi':'Moxtra Api',
       'moxtraAuthentication':'Moxtra Authentication',
       'authenticationSuccessful':'Moxtra Authentication Successful',
       'forgetApi':'Forgot Api',
      // '':'Enter an invalid email.',
       'emailNotRegistered':'Email is not registered with organisation. Ask for invitation link',
       'registeredEmail':'Enter registered email',
       'emailIsVerified':'Email is verified and OTC has been sent to your Email Address',
       'forgetApiLessTime':'Forgot Api less than 4 times',
       'otcIsSendToEmail':'Email is verified and OTC has been sent to your Email Address',
       'maxLimitReach':'Forgot Api max limit reached',
       'pleaseTryAfterHour':'Maximum limit reached, Please try after 00.00 hour',
       'checkInut':'Check presence of input fields',
       'apiValidation':'forgot api validation',
       'apiInputMissing':'API inputs are missing',
       'verifyEmailValidation':'verify email api validation',
      // '':'forgot api validation.',
       'resetPassword':'reset password api validation',
       'resendCode':'resend code api validation',
       'registerApi':'register api validation',
       'name':'Running Password Controller Specs',
       'emailVerify':'Verify Email Api'
    },
    'userProfile':{
       'updateUserProfile':'should Update user profile',
       'updateUserData':'Updated User profile data',
       'getUser':'Get User Profile',
       'checkBankDetails':'checking bank details of employee',
       'getApprovedUser':'Get Approved User Profile',
       'userDetails':'User details fetched successfully',
       'emailParameter':'Get User Profile for email parameter',
       'userCodeParameter':'Get User Profile for userCode parameter',
       //'':'User details fetched successfully.',
       'inputFilter':'Get input filter data for Organisation address-wise, Group-wise',
       'successfullyFetched':'Successfully fetched filter data',
       'pendingRequest':'Get Pending Edit Request',
       'successfullyPendingRequest':'Successfully fetched pending edit requests',
       'pastRequest':'Get Past Edit Request',
       'successfullyFetchedRequests':'Successfully fetched all edit requests',
       'loggedIn':'Get Logged-in user pending Edit Request',
       'successfullyPendingRequest':'Successfully fetched pending edit requests',
       'successfullyEditRequest':'Successfully fetched all edit requests',
       'loggedInUser':'Get Logged-in User Request changes',
       'loggedInUserPending':'Get Logged-in User Request pending changes',
       'loggedInUserRejected':'Get Logged-in User Request rejected changes',
     //  'successfully':'Successfully fetched all edit requests.',
       'searchProfile':'should search User profile',
       'searchProfilewithoutSearchParams':'should search user profile without search params',
       'searchProfileWithoutManagerId':'should search User profile without manager Id',
       'getLoggedinUser':'Get Logged-in User other than pending Request',
       'removeOldFields':'Get Logged in User role details removed old fields',
       'addNewFields':'Get Logged in User role details added new fields'
    },
    'userinfo':{
        'getError':'should Get Error in User information without JWT',
        'getUserInfomation':'should Get User information',
        'getOrganization':'should Get organization configuration',
        'sucessfullySendInformation':'Sucessfully sent User Information'
    },
    'rolesSpec':{
        'rolesSpecTest1':'Add Role',
        'rolesSpecTest1SimilarRole':'Add error on similar Role',
        'rolesSpecTest1SimilarRoleName':'Add error on similar Role Name',
        'rolesSpecTest1PermissionDenied':'Permission denied on Add Role',
        'rolesSpecTest1Msg':'New Role is created',
        'rolesSpecTest1MsgPermissionDenied':'Permission denied',
        'similarRoleExit':'Similar role already exists',
        'similarRoleNameExit':'Similar role name already exists',
        'rolesSpecTest2':'Edit Role',
        'rolesSpecTest2PermissionDenied':'Permission denied on Edit Role',
        'rolesSpecTest2Msg':'Role edited successfully',
        'rolesSpecTest2MsgPermissionDenied':'Permission denied',
        'rolesSpecTest3':'Delete Role',
        'rolesSpecTest3Msg':'Role deleted successfully',
        'rolesSpecTest4': 'Get Role List',
        'rolesSpecTest4GroupMissing':'Group error on missing Group Id',
        'groupMissing': 'Please pass Group Id',
        'rolesSpecTest4PermissionDenied':'Get Permission denied on get Role List',
        'rolesSpecPermissionDenied' : 'Permission denied',
        'rolesSpecTest4Msg':'Roles list sent successfully',
        'rolesSpecTest5':'Delete Role Id which doesn\'t exist',
        'rolesSpecTest5PermissionDenied':'Permission denied on Delete Role',
        'rolesSpecTest5Msg':'No such Role to Delete',
        'rolesSpecListPermissionDenied':'Permission denied',
    },
    'permissionSpec':{
        'permissionSpecTest':'Get All permission List',
        'permissionSpecTestMSg':'Permissions data sent successfully'

    },
    'orgAddress':{
        'ordAddTest1':'Add Similar Organization address',
        'ordAddTest1Msg':'Similar address already exists',
        'ordAddTest2':'Add Similar short Name for Organization address',
        'ordAddTest2Msg':'Similar short name already exists',
        'ordAddTest3':'OrgAddress deleted',
        'ordAddTest3Msg':'Address deleted successfully',
        'ordAddTest4':'OrgAddress delete error for non existence orgId',
        'ordAddTest4Msg':'No such org Address exists',
        'ordAddTest5':'Add Organization address',
        'ordAddTest5Msg':'Address added successfully',
        'ordAddTest6':'Edit Organization Address',
        'ordAddTest6Msg':'Address edited successfully',
        'ordAddTest7':'OrgAddress delete error for unauthorized user',
        'ordAddTest7Msg':'Permission denied',
        'ordAddTest8':'OrgAddress delete Id which doesn\'t exist',
        'ordAddTest8Msg':'No such org Address exists',
        'ordAddTest9':'Org Address List',
        'ordAddTest9Msg':'Organization address List',
        'ordAddTest10':'Org Address List error for unauthorized user',
        'ordAddTest10Msg':'Permission denied',
        'ordAddTest11':'Get permission denied for organization List',
        'ordAddTest11Msg':'Permission denied',
        'ordAddTest12':'Add First organization Organization address',
        'ordAddTest12Msg':'Address added successfully',
    },
    'groupSpec':{
        'groupSpecTest1':'Delete Group Id which doesn\'t exist',
        'groupSpecTest1Msg':'No groups to delete',
        'groupSpecTest2':'Add Group',
        'groupSpecTest2Msg':'Group added successfully',
        'groupSpecTest3':'Add Same Group Detail',
        'groupSpecTest3Msg':'Similar group already exists',
        'groupSpecTest4':'Add Same Group name Detail',
        'groupSpecTest4Msg':'Similar group name already exists',
        'groupSpecTest5':'Edit Group',
        'groupSpecTest5Msg':'Group edited successfully',
        'groupSpecTest6':'Get All Child Permissions on the basis of Group which doesn\'t exist',
        'groupSpecTest6Msg':'No such group exists',
        'groupSpecTest7':'Get Group List',
        'groupSpecTest7GroupMissing':'Get All Child Permissions error for missing Group Id',
        'groupSpecTest7Msg':'Group G1 permissions',
        'groupMissing': 'Please pass Group Id',
        'groupSpecTest8':'Group List',
        'groupSpecTest8Msg':'Groups list sent successfully',
        'groupSpecTest9':'Delete Group',
        'groupSpecTest9Msg':'Group deleted successfully',
        'groupSpecTest10':'Delete Group Id which doesn\'t exist',
        'groupSpecTest10Msg':'No groups to delete'
    },
    'gradesSpec':{
        'gradesTest1':'Add Grade',
        'gradesTest1Msg':'Grade added successfully',
        'gradesTest2':'Edit Grade',
        'gradesTest2Msg':'Grade edited successfully',
        'gradesTest3':'Delete Grade',
        'gradesTest3Msg':'Grade Deleted successfully',
        'gradesTest4':'Delete Grade ID which doesn\'t exist',
        'gradesTest4Msg':'No Grades to Delete',
        'gradesTest5':'Grade List',
        'gradesTest5Msg':'Grades List sent successfully',
        'gradesTest6':'Add same Grade Detail',
        'gradesTest6Msg':'Similar grade already exists'
    },
    'editEmployeeSpec':{
        'editEmployeeTestPermissionDeniedFamily':'Edit Family Employee Permission denied',
        'editEmployeeTestPermissionDeniedContact':'Edit Contact Employee Permission denied',
        'editEmployeeTestPermissionDeniedBasic':'Edit Basic Employee Permission denied',
        'editEmployeeTestPermissionDeniedPerm':'Edit Permissions Employee Permission denied',
        'editEmployeeTest1':'Edit Employee Permission for Non existence user',
        'editEmployeeTest1Msg':'Entered employee ID does\'t exist',
        'editEmployeeTest2':'Edit Employee Permission for Null user',
        'editEmployeeTest2Msg':'Employee ID is null',
        'editEmployeeTest3':'Edit Employee Permission for empty array length',
        'editEmployeeTest3Msg':'Employee Permissions are Empty/Invalid',
        'editEmployeeTest4':'Edit Employee BasicInformation detail',
        'editEmployeeTest4Msg':'User edited successfully',
        'editEmployeeTest4MsgNoUser':'User Basic Info error for no existence user',
        'editEmployeeTest4MsgLargeUserID':'User Contact Info error for no existence large user Id',
        'editEmployeeTest4MsgNoImage':'User edited successfully without image edit',
        'editEmployeeTest5':'Edit Employee Permission',
        'editEmployeeTest5Msg':'Employee Permissions are Updated',
        'empPermissionMissing': 'Please enter Permission Id\'s',
        'empGroupsMissing': 'Please enter selected Group Id\'s',
        'permissionGroupIds': 'Employee Permissions / GroupIds are Empty/Invalid',
        'editEmployeeTest6':'Edit Employee Other Information detail',
        'editEmployeeTest6Msg':'Employee Other details are updated',
        'editEmployeeTest7':'Edit Employee Other Information detail for Non existence user',
        'editEmployeeTest7Msg':'Entered employee ID does\'t exist',
        'editEmployeeTest8':'Error in edit Employee Other Information detail if data doesn\'t exist',
        'editEmployeeTest8Msg':'No other info details exists',
        'editEmployeeTest9':'Edit Employee Bank Information detail',
        'editEmployeeTest9Msg':'Employee Financial details edited successfully',
        'editEmployeeTest10':'Edit Employee Bank Information detail for Non existence user',
        'editEmployeeTest10Msg':'Entered employee ID does\'t exist',
        'editEmployeeTest11':'Error in edit Employee Bank Information detail if data doesn\'t exist',
        'editEmployeeTest11Msg':'No Bank Info details exists',
        'editEmployeeTest12':'Edit Employee Govt Document Information detail',
        'editEmployeeTest12Msg':'Govt. Doc info edited successfully',
        'editEmployeeTest13':'Edit Employee Govt Document Information detail for Non existence user',
        'editEmployeeTest13Msg':'Entered employee ID does\'t exist',
        'editEmployeeTest14':'Error in edit Employee Govt Document Information detail if data doesn\'t exist',
        'editEmployeeTest14Msg':'No government details exists',
        'editEmployeeTest15':'Edit Employee Emergency Information detail',
        'editEmployeeTest15Msg':'Emergency Contact info edited successfully',
        'editEmployeeTest16':'Edit Employee Emergency Information detail for Non existence user',
        'editEmployeeTest16Msg':'Entered employee ID does\'t exist',
        'editEmployeeTest17':'Error in edit Employee Emergency Information detail if data doesn\'t exist',
        'editEmployeeTest17Msg':'No Emergency details exists',
        'editEmployeeTest18':'Edit Employee Contact Information detail',
        'editEmployeeTest18GroupMissing':'Edit Employee Contact Information detail error on groups Id\'s missing',
        'editEmployeeTest18PermissionMissing':'Edit Employee Contact Information detail error on permission Id\'s missing',
        'editEmployeeTest18Msg':'Contact info edited successfully',
        'editEmployeeTest19':'Edit Employee Contact Information detail for Non existence user',
        'editEmployeeTest19Msg':'Entered employee ID does\'t exist',
        'editEmployeeTest20':'Error in edit Employee Contact Information detail if data doesn\'t exist',
        'editEmployeeTest20Msg':'No Contact details exists',
        'editEmployeeTest21':'Edit Employee Family Information detail',
        'editEmployeeTest21Msg':'Family info edited successfully',
        'editEmployeeTest22':'Edit Employee Family Information detail for Non existence user',
        'editEmployeeTest22LargeId':'Edit Employee Family Information detail for Non existence large user id',
        'editEmployeeTest22Msg':'Entered employee ID does\'t exist',
        'editEmployeeTest23':'Error in edit Employee Family Information detail if data doesn\'t exist',
        'editEmployeeTest23Msg':'No family details exists',
        'editEmployeeTest24':'Edit Employee BasicInformation detail without Grade detail',
        'editEmployeeTest24Msg':'Grade for employee doesn\'t exist.Please create grade'
    },
    'adminDataSpec':{
        'adminDataTest1':'Add Employee Permission for Non existence user',
        'adminDataTest1Msg':'Entered employee ID does\'t exist',
        'adminDataTest2':'Add Employee Permission for Null user',
        'adminDataTest2Msg':'Employee ID is null',
        'adminDataTest3':'Add Employee Permission for empty array length',
        'adminDataTest3Msg':'Employee Permissions are Empty/Invalid',
        'adminDataTest4':'Add Employee Basic Information detail',
        'adminDataTest4Msg':'User created successfully',
        'adminDataTest5':'Add Employee Permission',
        'adminDataTest5GroupMissing':'Add Employee Permission error for missing groups',
        'adminDataTest5PermissionMissing':'Add Employee Permission error for missing permissions',
        'adminDataTest5Msg':'Employee Permissions are added',
        'adminDataTest6':'Edit Employee Permission',
        'adminDataTest6Msg':'Employee Permissions are Updated',
        'empPermissionMissing': 'Please enter Permission Id\'s',
        'empGroupsMissing': 'Please enter selected Group Id\'s',
        'permissionGroupIds': 'Employee Permissions / GroupIds are Empty/Invalid',
        'adminDataTest7':'Add Employee Other Information detail',
        'adminDataTest7Msg':'Employee Other details are added',
        'adminDataTest8':'Add Employee Bank Information detail',
        'adminDataTest8Msg':'Employee Financial details are added',
        'adminDataTest9':'Add Employee Govt Document Information detail',
        'adminDataTest9Msg':'Govt. Doc Info added successfully',
        'adminDataTest10':'Add Employee Emergency Information detail',
        'adminDataTest10Msg':'Emergency Contact info added successfully',
        'adminDataTest11':'Add Employee Contact Information detail',
        'adminDataTest11Msg':'Contact info added successfully',
        'adminDataTest12':'Add Employee Family Information detail',
        'adminDataTest12Msg':'Family info added successfully',
        'adminDataTest13':'Get Roles and Permissions of the selected Group using employeeID',
        'adminDataTest13Msg':'Groups, Roles and Permissions are fetched',
        'adminDataTest14':'Get Roles and Permissions of the selected Group using groupdID',
        'adminDataTest14Msg':'Groups, Roles and Permissions are fetched',
        'adminDataTest15':'Get Govt Docs info of the selected user',
        'adminDataTest15Msg':'Govt. Docs are successfully fetched',
        'adminDataTest16':'Get Govt Docs error info of the selected user',
        'adminDataTest16Msg':'Permission denied',
        'adminDataTest17':'Add Employee BasicInformation detail without Grade detail',
        'adminDataTest17Msg':'Grade for employee doesn\'t exist.Please create grade',
        'adminDataTest18':'HR should approve user updated information',
        'adminDataTest18Msg':'Successfully approved request',
        'adminDataTest19':'HR should get error for already approved user information',
        'adminDataTest19Msg':'Already request has been approved',
        'adminDataTest20':'HR should reject user updated information',
        'adminDataTest20Msg':'Successfully rejected request',
        'adminDataTest21':'HR should get error for already rejected user information',
        'adminDataTest21Msg':'Already request has been rejected',
        'adminDataTest22':'Get Admin data of organization',
        'adminDataTest22Msg':'Admin information is now available',
        'adminDataTest23':'Admin should be able to search',
        'adminDataTest23Msg':'User details is fetched',
        'adminDataTest24':'Admin should get error for non-existence user',
        'adminDataTest24Msg':'No such user exist',
        'adminDataTest25':'Get Admin data of organization',
        'adminDataTest25Msg':'Permission denied',
        'adminDataTest26':'Delete the user and employee record',
        'adminDataTest26Msg':'Successfully Deleted',
        'adminDataTest27':'Get Bank info of the selected user',
        'adminDataTest27Msg':'Govt. Account are successfully fetched',
        'adminDataTest28':'Get Bank info error of the selected user',
        'adminDataTest28Msg':'Permission denied',
        'adminDataTest29':'Entered User does not exist while getting Bank info',
        'adminDataTest29Msg':'Entered employee ID does\'t exist',
    }
}